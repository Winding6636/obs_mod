/*****************************************************************************
Copyright (C) 2017 by c3r1c3 <c3r1c3@nevermindonline.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

/*
 * "Droste Effect" for OBS by c3r1c3
 * Inspired by https://www.shadertoy.com/view/4dGXD1
 */

/* Standard OBS->GPU uploads. */
uniform float4x4 ViewProj;
uniform texture2d image;

/* Filter variables from OBS. */
uniform float number_of_repeats;
uniform float downscale_amount;
uniform float x_offset;
uniform float y_offset;
uniform float downscale_inversion;

/*
 * Here we set how the base texture will be sampled/read/interpreted.
 * Below is what you would normally use in OBS. Why?
 * Linear filtering 'messes' with the image the least.
 */
sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

/*
 * Here we create the struct to hold the current position and texture info
 * of the vertex in question.
 */
struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

bool innerRectangle(float2 uv, float2 location, float2 size)
{
	bool test = false;
	if (uv.x >= location.x && uv.x <= location.x + size.x &&
			uv.y >= location.y && uv.y <= location.y + size.y) {
		test = true;
	}
	return test;
}

/*
 * HLSL's fmod function doesn't seem to work like the GLSL
 * mod command. This function addresses that issue.
 */
float mod(float x, float y)
{
	return x - y * floor(x / y);
}

/*
 * Now we transform the vertices to world space (and the
 * textures to go with it). In OBS you'll usually want to
 * use the code below, unless you're trying to create a
 * '3D'-esqe effect.
 */
VertData VSDefault(VertData vert_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = vert_in.uv;
	return vert_out;
}

/*
 * Lastly we have the function that transforms the texture into
 * the "Droste" version of itself.
 */
float4 PSDroste(VertData vert_in) : TARGET
{
	float4 color;
	float2 location = float2(0.0, 0.0);
	float2 size = float2(1.0, 1.0);

	for (int i = 0; i <= number_of_repeats; i++) {
		if (innerRectangle(vert_in.uv, location, size)) {
			color =	image.Sample(textureSampler,
					((vert_in.uv - location) / size));
		}
		location += float2(x_offset,y_offset);
		size += float2(downscale_amount, downscale_amount);
	}

	/* Now return the result(s) to the main shader. */
	return color;
}

/* This call actually executes the above functions on the GPU. */
technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSDroste(vert_in);
	}
}
