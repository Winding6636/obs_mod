/*****************************************************************************
Copyright (C) 2017 by c3r1c3 <c3r1c3@nevermindonline.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

/*
 * Inspired by the "Like a Dream" filter from
 * http://www.geeks3d.com/20091112/shader-library-dream-vision-post-processing
 -filter-glsl/
 * Additional Matrix help from http://www.graficaobscura.com/matrix/index.html
 * Coded for OBS by c3r1c3
 */

/* Standard OBS->GPU uploads. */
uniform float4x4 ViewProj;
uniform texture2d image;

/* Filter variables from OBS. */
uniform float3 gamma;
uniform float number_of_shifts;
uniform float shift_gap;
uniform float opacity;
uniform float4 tint;
uniform float tint_range;

/*
 * Here we set how the base texture will be sampled/read/interpreted.
 * Below is what you would normally use in OBS. Why?
 * Linear filtering 'messes' with the image the least.
 */
sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

/*
 * Here we create the struct to hold the current position and texture info
 * of the vertex in question.
 */
struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

/*
 * Now we transform the vertices to world space (and the
 * textures to go with it). In OBS you'll usually want to
 * use the code below, unless you're trying to create a
 * '3D'-esqe effect.
 */
VertData VSDefault(VertData vert_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

/*
 * Lastly we have the function that transforms the texture into
 * the "Like-a-Dream" version of itself.
 */
float4 PSLikeADream(VertData vert_in) : TARGET
{
	float4 currentPixel = image.Sample(textureSampler,
			vert_in.uv);

	/* Now we layer the image on itself for a hazy look. */
	for (int i = 1; i <= number_of_shifts; i++) {
		currentPixel = currentPixel + image.Sample(textureSampler,
				vert_in.uv + (i * shift_gap));
		currentPixel = currentPixel + image.Sample(textureSampler,
				vert_in.uv - (i * shift_gap));
	}

	/* Now convert to grayscale. */
	float grayscale = ((currentPixel.r + currentPixel.g + currentPixel.b) *
			0.3333);
	currentPixel.rgb = float3(grayscale, grayscale, grayscale);

	/* Now address the gamma. */
	currentPixel.rgb = pow(currentPixel.rgb, gamma);

	/* Darken to compensate. */
	currentPixel.rgb = currentPixel.rgb * (number_of_shifts * .015);

	/* Now add the color tint. */
	if(currentPixel.r > (0.5 - tint_range) && currentPixel.r <
			(0.5 + tint_range)) {
		currentPixel.rgb = lerp(float3(1.0, 1.0, 1.0),
				tint.rgb, 1 - currentPixel.r);
	}

	/* Now set the Alpha Channel. */
	currentPixel.a = opacity;

	/* Now return the result(s) to the main shader. */
	return currentPixel;
}

/* This call actually executes the above functions on the GPU. */
technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSLikeADream(vert_in);
	}
}
