/*****************************************************************************
Copyright (C) 2016 by c3r1c3 <c3r1c3@nevermindonline.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*****************************************************************************/

/*
 * From the "Crosshatching" filter from
 * https://machinesdontcare.wordpress.com/2011/02/02/glsl-crosshatch/
 * Adapted for OBS by c3r1c3
 */

/* Standard OBS->GPU uploads. */
uniform float4x4 ViewProj;
uniform texture2d image;

/* Filter variables from OBS. */
uniform float offset;
uniform float threshold_1;
uniform float threshold_2;
uniform float threshold_3;
uniform float threshold_4;

/*
 * Here we set how the base texture will be sampled/read/interpreted.
 * Below is what you would normally use in OBS. Why?
 * Linear filtering 'messes' with the image the least.
 */
sampler_state textureSampler
{
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

/*
 * Here we create the struct to hold the current position and texture info
 * of the vertex in question.
 */
struct VertData
{
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

/*
 * Now we transform the vertices to world space (and the
 * textures to go with it). In OBS you'll usually want to
 * use the code below, unless you're trying to create a
 * '3D'-esqe effect.
 */
VertData VSDefault(VertData vert_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

/*
 * Lastly we have the function that transforms the texture into
 * the "Crosshatch" version of itself.
 */
float4 PSCrosshatch(VertData vert_in) : TARGET
{
	float  luminance;
    float4 pix_pos;
    float4 color;
    float3 trans_color;

	/*
	 * Send the vertex position to SV_Position to get
	 * the screen coordinates.
	 */
	pix_pos = gl_FragCoord;

	/* Grab the current pixel of the image/texture. */
	color = image.Sample(textureSampler, vert_in.uv);

	/* Set the default color (white) for the crosshatching. */
	trans_color = float3(1.0, 1.0, 1.0);

	/*
	 * Here we get the luminance value of the pixel to run
	 * the maths below against... hopefully avoiding extra
	 * texture lookups.
	 */
	luminance = length(color.rgb);

	/* Now we do the actual math for the crosshatching. */
	if (luminance < threshold_1)
	{
		if (mod(pix_pos.x + pix_pos.y, (offset * 2)) == 0.0)
		{
			trans_color = float3(0.0, 0.0, 0.0);
		}
	}

	if (luminance < threshold_2)
	{
		if (mod(pix_pos.x - pix_pos.y, (offset * 2)) == 0.0)
		{
			trans_color = float3(0.0, 0.0, 0.0);
		}
	}

	if (luminance < threshold_3)
	{
		if (mod(pix_pos.x + pix_pos.y - offset, (offset * 2)) == 0.0)
		{
			trans_color = float3(0.0, 0.0, 0.0);
		}
	}

	if (luminance < threshold_4)
	{
		if (mod(pix_pos.x - pix_pos.y - offset, (offset * 2)) == 0.0)
		{
			trans_color = float3(0.0, 0.0, 0.0);
		}
	}

	/* Now tally the result and merge into the (updated) image. */
	color.rgb = trans_color;

	/* Now return the result(s) to the main shader. */
	return color;
}

/* This call actually executes the above functions on the GPU. */
technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSCrosshatch(vert_in);
	}
}